package test

import (
	"fmt"
	"slices"
	"testing"
)

func TestComparisons(t *testing.T) {

	tests := []string{
		"testdata/comparisons.textproto",
	}
	skipTests := []string{
		// TODO: function type not support
		"comparisons/lt_literal/lt_string",
		"comparisons/lt_literal/lt_string_empty_to_nonempty",
		"comparisons/lt_literal/lt_string_case",
		"comparisons/lt_literal/lt_string_length",
		"comparisons/lt_literal/lt_string_diacritical_mark_sensitive",
		"comparisons/lt_literal/not_lt_string_empty",
		"comparisons/lt_literal/not_lt_string_same",
		"comparisons/lt_literal/not_lt_string_case_length",
		"comparisons/lt_literal/unicode_order_lexical",
		"comparisons/lt_literal/lt_bytes",
		"comparisons/lt_literal/not_lt_bytes_same",
		"comparisons/lt_literal/not_lt_bytes_width",
		"comparisons/lt_literal/lt_bool_false_first",
		"comparisons/lt_literal/not_lt_bool_same",
		"comparisons/lt_literal/not_lt_bool_true_first",
		"comparisons/gt_literal/gt_string_case",
		"comparisons/gt_literal/gt_string_to_empty",
		"comparisons/gt_literal/not_gt_string_empty_to_empty",
		"comparisons/gt_literal/gt_string_unicode",
		"comparisons/gt_literal/gt_bytes_one",
		"comparisons/gt_literal/gt_bytes_one_to_empty",
		"comparisons/gt_literal/not_gt_bytes_sorting",
		"comparisons/gt_literal/gt_bool_true_false",
		"comparisons/gt_literal/not_gt_bool_false_true",
		"comparisons/gt_literal/not_gt_bool_same",
		"comparisons/lte_literal/lte_string_empty",
		"comparisons/lte_literal/lte_string_from_empty",
		"comparisons/lte_literal/not_lte_string_to_empty",
		"comparisons/lte_literal/lte_string_lexicographical",
		"comparisons/lte_literal/lte_string_unicode_eq",
		"comparisons/lte_literal/lte_string_unicode_lt",
		"comparisons/lte_literal/not_lte_string_unicode",
		"comparisons/lte_literal/lte_bytes_empty",
		"comparisons/lte_literal/not_lte_bytes_length",
		"comparisons/lte_literal/lte_bool_false_true",
		"comparisons/lte_literal/lte_bool_false_false",
		"comparisons/lte_literal/lte_bool_true_false",
		"comparisons/gte_literal/gte_string_empty",
		"comparisons/gte_literal/gte_string_to_empty",
		"comparisons/gte_literal/gte_string_empty_to_nonempty",
		"comparisons/gte_literal/gte_string_length",
		"comparisons/gte_literal/not_gte_string_lexicographical",
		"comparisons/gte_literal/gte_string_unicode_eq",
		"comparisons/gte_literal/gte_string_unicode_gt",
		"comparisons/gte_literal/not_get_string_unicode",
		"comparisons/gte_literal/gte_bytes_to_empty",
		"comparisons/gte_literal/not_gte_bytes_empty_to_nonempty",
		"comparisons/gte_literal/gte_bytes_samelength",
		"comparisons/gte_literal/gte_bool_gt",
		"comparisons/gte_literal/gte_bool_eq",
		"comparisons/gte_literal/not_gte_bool_lt",
		"comparisons/bound/bytes_gt_left_false",
		"comparisons/bound/bool_lt_right_true",
		"comparisons/bound/string_gte_right_true",

		// TODO: struct not support
		"comparisons/eq_wrapper/eq_bool",
		"comparisons/eq_wrapper/eq_bool_empty",
		"comparisons/eq_wrapper/eq_bool_not_null",
		"comparisons/eq_wrapper/eq_bool_proto2_null",
		"comparisons/eq_wrapper/eq_bool_proto3_null",
		"comparisons/eq_wrapper/eq_bytes",
		"comparisons/eq_wrapper/eq_bytes_empty",
		"comparisons/eq_wrapper/eq_bytes_not_null",
		"comparisons/eq_wrapper/eq_bytes_proto2_null",
		"comparisons/eq_wrapper/eq_bytes_proto3_null",
		"comparisons/eq_wrapper/eq_double",
		"comparisons/eq_wrapper/eq_double_empty",
		"comparisons/eq_wrapper/eq_double_not_null",
		"comparisons/eq_wrapper/eq_double_proto2_null",
		"comparisons/eq_wrapper/eq_double_proto3_null",
		"comparisons/eq_wrapper/eq_float",
		"comparisons/eq_wrapper/eq_float_empty",
		"comparisons/eq_wrapper/eq_float_not_null",
		"comparisons/eq_wrapper/eq_float_proto2_null",
		"comparisons/eq_wrapper/eq_float_proto3_null",
		"comparisons/eq_wrapper/eq_int32",
		"comparisons/eq_wrapper/eq_int32_empty",
		"comparisons/eq_wrapper/eq_int32_not_null",
		"comparisons/eq_wrapper/eq_int32_proto2_null",
		"comparisons/eq_wrapper/eq_int32_proto3_null",
		"comparisons/eq_wrapper/eq_int64",
		"comparisons/eq_wrapper/eq_int64_empty",
		"comparisons/eq_wrapper/eq_int64_not_null",
		"comparisons/eq_wrapper/eq_int64_proto2_null",
		"comparisons/eq_wrapper/eq_int64_proto3_null",
		"comparisons/eq_wrapper/eq_string",
		"comparisons/eq_wrapper/eq_string_empty",
		"comparisons/eq_wrapper/eq_string_not_null",
		"comparisons/eq_wrapper/eq_string_proto2_null",
		"comparisons/eq_wrapper/eq_string_proto3_null",
		"comparisons/eq_wrapper/eq_uint32",
		"comparisons/eq_wrapper/eq_uint32_empty",
		"comparisons/eq_wrapper/eq_uint32_not_null",
		"comparisons/eq_wrapper/eq_uint32_proto2_null",
		"comparisons/eq_wrapper/eq_uint32_proto3_null",
		"comparisons/eq_wrapper/eq_uint64",
		"comparisons/eq_wrapper/eq_uint64_empty",
		"comparisons/eq_wrapper/eq_uint64_not_null",
		"comparisons/eq_wrapper/eq_uint64_proto2_null",
		"comparisons/eq_wrapper/eq_uint64_proto3_null",
		"comparisons/eq_wrapper/eq_proto2",
		"comparisons/eq_wrapper/eq_proto3",
		"comparisons/eq_wrapper/eq_proto2_missing_fields_neq",
		"comparisons/eq_wrapper/eq_proto3_missing_fields_neq",
		"comparisons/eq_wrapper/eq_proto_nan_equal",
		"comparisons/eq_wrapper/eq_proto2_any_unpack_equal",
		"comparisons/eq_wrapper/eq_proto2_any_unpack_not_equal",
		"comparisons/eq_wrapper/eq_proto2_any_unpack_bytewise_fallback_not_equal",
		"comparisons/eq_wrapper/eq_proto2_any_unpack_bytewise_fallback_equal",
		"comparisons/eq_wrapper/eq_proto3_any_unpack_equal",
		"comparisons/eq_wrapper/eq_proto3_any_unpack_not_equal",
		"comparisons/eq_wrapper/eq_proto3_any_unpack_bytewise_fallback_not_equal",
		"comparisons/eq_wrapper/eq_proto3_any_unpack_bytewise_fallback_equal",
		"comparisons/ne_literal/ne_proto2",
		"comparisons/ne_literal/ne_proto3",
		"comparisons/ne_literal/ne_proto2_missing_fields_neq",
		"comparisons/ne_literal/ne_proto3_missing_fields_neq",
		"comparisons/ne_literal/ne_proto_nan_not_equal",
		"comparisons/ne_literal/ne_proto2_any_unpack",
		"comparisons/ne_literal/ne_proto2_any_unpack_bytewise_fallback",
		"comparisons/ne_literal/ne_proto3_any_unpack",
		"comparisons/ne_literal/ne_proto3_any_unpack_bytewise_fallback",

		// feature: dyn not suport
		"comparisons/eq_literal/eq_int_uint",
		"comparisons/eq_literal/not_eq_int_uint",
		"comparisons/eq_literal/eq_int_double",
		"comparisons/eq_literal/not_eq_int_double",
		"comparisons/eq_literal/eq_uint_int",
		"comparisons/eq_literal/not_eq_uint_int",
		"comparisons/eq_literal/eq_uint_double",
		"comparisons/eq_literal/not_eq_uint_double",
		"comparisons/eq_literal/not_eq_int_double_nan",
		"comparisons/eq_literal/not_eq_uint_double_nan",
		"comparisons/eq_literal/eq_double_int",
		"comparisons/eq_literal/not_eq_double_int",
		"comparisons/eq_literal/eq_double_uint",
		"comparisons/eq_literal/not_eq_double_uint",
		"comparisons/eq_literal/eq_dyn_json_null",
		"comparisons/eq_literal/not_eq_dyn_bool_null",
		"comparisons/eq_literal/not_eq_dyn_bytes_null",
		"comparisons/eq_literal/not_eq_dyn_double_null",
		"comparisons/eq_literal/not_eq_dyn_duration_null",
		"comparisons/eq_literal/not_eq_dyn_int_null",
		"comparisons/eq_literal/not_eq_dyn_list_null",
		"comparisons/eq_literal/not_eq_dyn_map_null",
		"comparisons/eq_literal/not_eq_dyn_proto2_msg_null",
		"comparisons/eq_literal/not_eq_dyn_proto3_msg_null",
		"comparisons/eq_literal/not_eq_dyn_string_null",
		"comparisons/eq_literal/not_eq_dyn_timestamp_null",
		"comparisons/eq_literal/eq_dyn_int_uint",
		"comparisons/eq_literal/eq_dyn_int_double",
		"comparisons/eq_literal/eq_dyn_uint_int",
		"comparisons/eq_literal/eq_dyn_uint_double",
		"comparisons/eq_literal/eq_dyn_double_int",
		"comparisons/eq_literal/eq_dyn_double_uint",
		"comparisons/eq_literal/not_eq_dyn_int_uint",
		"comparisons/eq_literal/not_eq_dyn_int_double",
		"comparisons/eq_literal/not_eq_dyn_uint_int",
		"comparisons/eq_literal/not_eq_dyn_uint_double",
		"comparisons/eq_literal/not_eq_dyn_double_int",
		"comparisons/eq_literal/not_eq_dyn_double_uint",
		"comparisons/eq_wrapper/eq_proto_different_types",
		"comparisons/ne_literal/ne_int_double",
		"comparisons/ne_literal/not_ne_int_double",
		"comparisons/ne_literal/ne_int_uint",
		"comparisons/ne_literal/not_ne_int_uint",
		"comparisons/ne_literal/ne_uint_double",
		"comparisons/ne_literal/not_ne_uint_double",
		"comparisons/ne_literal/not_ne_int_double_nan",
		"comparisons/ne_literal/not_ne_uint_double_nan",
		"comparisons/ne_literal/ne_double_int",
		"comparisons/ne_literal/not_ne_double_int",
		"comparisons/ne_literal/ne_double_uint",
		"comparisons/ne_literal/not_ne_double_uint",
		"comparisons/ne_literal/ne_proto_different_types",
		"comparisons/lt_literal/lt_dyn_int_uint",
		"comparisons/lt_literal/lt_dyn_int_double",
		"comparisons/lt_literal/lt_dyn_uint_int",
		"comparisons/lt_literal/lt_dyn_uint_double",
		"comparisons/lt_literal/lt_dyn_double_int",
		"comparisons/lt_literal/lt_dyn_double_uint",
		"comparisons/lt_literal/not_lt_dyn_int_uint",
		"comparisons/lt_literal/not_lt_dyn_int_double",
		"comparisons/lt_literal/not_lt_dyn_uint_int",
		"comparisons/lt_literal/not_lt_dyn_uint_double",
		"comparisons/lt_literal/not_lt_dyn_double_int",
		"comparisons/lt_literal/not_lt_dyn_double_uint",
		"comparisons/lt_literal/lt_dyn_int_big_uint",
		"comparisons/lt_literal/lt_dyn_small_int_uint",
		"comparisons/lt_literal/not_lt_dyn_int_big_lossy_double",
		"comparisons/lt_literal/lt_dyn_int_big_lossy_double",
		"comparisons/lt_literal/not_lt_dyn_int_small_double",
		"comparisons/lt_literal/not_lt_dyn_int_small_lossy_double",
		"comparisons/lt_literal/not_lt_dyn_uint_small_int",
		"comparisons/lt_literal/not_lt_dyn_big_uint_int",
		"comparisons/lt_literal/not_lt_dyn_uint_small_double",
		"comparisons/lt_literal/lt_dyn_uint_big_double",
		"comparisons/lt_literal/not_lt_dyn_big_double_uint",
		"comparisons/lt_literal/not_lt_dyn_big_double_int",
		"comparisons/lt_literal/not_lt_dyn_small_double_int",
		"comparisons/gt_literal/gt_dyn_int_uint",
		"comparisons/gt_literal/gt_dyn_int_double",
		"comparisons/gt_literal/gt_dyn_uint_int",
		"comparisons/gt_literal/gt_dyn_uint_double",
		"comparisons/gt_literal/gt_dyn_double_int",
		"comparisons/gt_literal/gt_dyn_double_uint",
		"comparisons/gt_literal/not_gt_dyn_int_uint",
		"comparisons/gt_literal/not_gt_dyn_int_double",
		"comparisons/gt_literal/not_gt_dyn_uint_int",
		"comparisons/gt_literal/not_gt_dyn_uint_double",
		"comparisons/gt_literal/not_gt_dyn_double_int",
		"comparisons/gt_literal/not_gt_dyn_double_uint",
		"comparisons/gt_literal/not_gt_dyn_int_big_uint",
		"comparisons/gt_literal/not_gt_dyn_small_int_uint",
		"comparisons/gt_literal/not_gt_dyn_int_big_double",
		"comparisons/gt_literal/not_gt_dyn_int_small_lossy_double",
		"comparisons/gt_literal/gt_dyn_int_small_lossy_double_greater",
		"comparisons/gt_literal/gt_dyn_uint_small_int",
		"comparisons/gt_literal/gt_dyn_big_uint_int",
		"comparisons/gt_literal/gt_dyn_uint_small_double",
		"comparisons/gt_literal/not_gt_dyn_uint_big_double",
		"comparisons/gt_literal/gt_dyn_big_double_uint",
		"comparisons/gt_literal/not_gt_dyn_big_double_int",
		"comparisons/gt_literal/not_gt_dyn_small_double_int",
		"comparisons/lte_literal/lte_dyn_int_uint",
		"comparisons/lte_literal/lte_dyn_int_double",
		"comparisons/lte_literal/lte_dyn_uint_int",
		"comparisons/lte_literal/lte_dyn_uint_double",
		"comparisons/lte_literal/lte_dyn_double_int",
		"comparisons/lte_literal/lte_dyn_double_uint",
		"comparisons/lte_literal/not_lte_dyn_int_uint",
		"comparisons/lte_literal/not_lte_dyn_int_double",
		"comparisons/lte_literal/not_lte_dyn_uint_int",
		"comparisons/lte_literal/not_lte_dyn_uint_double",
		"comparisons/lte_literal/not_lte_dyn_double_int",
		"comparisons/lte_literal/not_lte_dyn_double_uint",
		"comparisons/lte_literal/lte_dyn_int_big_uint",
		"comparisons/lte_literal/lte_dyn_small_int_uint",
		"comparisons/lte_literal/lte_dyn_int_big_double",
		"comparisons/lte_literal/lte_dyn_int_small_lossy_double",
		"comparisons/lte_literal/not_lte_dyn_int_small_lossy_double_less",
		"comparisons/lte_literal/not_lte_dyn_uint_small_int",
		"comparisons/lte_literal/not_lte_dyn_big_uint_int",
		"comparisons/lte_literal/not_lte_dyn_uint_small_double",
		"comparisons/lte_literal/lte_dyn_uint_big_double",
		"comparisons/lte_literal/not_lte_dyn_big_double_uint",
		"comparisons/lte_literal/lte_dyn_big_double_int",
		"comparisons/lte_literal/lte_dyn_small_double_int",
		"comparisons/gte_literal/gte_dyn_int_uint",
		"comparisons/gte_literal/gte_dyn_int_double",
		"comparisons/gte_literal/gte_dyn_uint_int",
		"comparisons/gte_literal/gte_dyn_uint_double",
		"comparisons/gte_literal/gte_dyn_double_int",
		"comparisons/gte_literal/gte_dyn_double_uint",
		"comparisons/gte_literal/not_gte_dyn_int_uint",
		"comparisons/gte_literal/not_gte_dyn_int_double",
		"comparisons/gte_literal/not_gte_dyn_uint_int",
		"comparisons/gte_literal/not_gte_dyn_uint_double",
		"comparisons/gte_literal/not_gte_dyn_double_int",
		"comparisons/gte_literal/not_gte_dyn_double_uint",
		"comparisons/gte_literal/not_gte_dyn_int_big_uint",
		"comparisons/gte_literal/not_gte_dyn_small_int_uint",
		"comparisons/gte_literal/gte_dyn_int_big_lossy_double",
		"comparisons/gte_literal/not_gte_dyn_int_big_double",
		"comparisons/gte_literal/gte_dyn_int_small_lossy_double_equal",
		"comparisons/gte_literal/gte_dyn_int_small_lossy_double_greater",
		"comparisons/gte_literal/gte_dyn_uint_small_int",
		"comparisons/gte_literal/gte_dyn_big_uint_int",
		"comparisons/gte_literal/gte_dyn_uint_small_double",
		"comparisons/gte_literal/not_gte_dyn_uint_big_double",
		"comparisons/gte_literal/gte_dyn_big_double_uint",
		"comparisons/gte_literal/gte_dyn_big_double_int",
		"comparisons/gte_literal/gte_dyn_small_double_int",

		// feature: not support mixed type
		"comparisons/eq_literal/not_eq_list_null",
		"comparisons/eq_literal/eq_list_mixed_type_numbers",
		"comparisons/eq_literal/not_eq_list_mixed_type_numbers",
		"comparisons/eq_literal/not_eq_list_false_vs_types",
		"comparisons/eq_literal/eq_map_mixed_type_numbers",
		"comparisons/eq_literal/eq_map_value_mixed_types",
		"comparisons/eq_literal/not_eq_list_elem_null",
		"comparisons/in_list_literal/elem_in_mixed_type_list",
		"comparisons/in_list_literal/elem_in_mixed_type_list_cross_type",
		"comparisons/in_map_literal/key_in_mixed_key_type_map",
		"comparisons/in_map_literal/key_in_mixed_key_type_map_cross_type",

		// feature: type not match
		"comparisons/eq_literal/eq_mixed_types",
		"comparisons/eq_literal/eq_list_elem_mixed_types",
		"comparisons/ne_literal/ne_mixed_types",
	}

	files := LoadTestFile(tests)
	for _, file := range files {
		for _, section := range file.GetSection() {
			for _, testCase := range section.GetTest() {
				name := fmt.Sprintf("%s/%s/%s", file.GetName(), section.GetName(), testCase.GetName())

				if slices.Contains(skipTests, name) {
					continue
				}

				if err := RunTestCase(testCase); err != nil {
					t.Errorf("RunTestCase(%q) error: %v", name, err)
				}
			}
		}
	}

}
